openapi: 3.0.3
info:
  title: Project Contributors
  version: 1.0.0
paths:
  /api/user/register/:
    post:
      operationId: user_register_create
      description: "Register a new user"
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserSerializerWithToken"
              properties:
                token:
                  readOnly: true
          application/x-www-form-urlencoded:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserSerializerWithToken"
              properties:
                token:
                  readOnly: true
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserSerializerWithToken"
              properties:
                token:
                  readOnly: true
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSerializerWithToken"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
          description: ""
  /api/user/login/:
    post:
      operationId: user_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenObtainPair"
          description: ""
        "401":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "No active account found with the given credentials"
          description: ""
  /api/user/token/refresh/:
    post:
      operationId: user_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefresh"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
          description: ""
        "401":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Token is invalid or expired"
                  code:
                    type: string
                    default: "token_not_valid"
          description: ""
  /api/user/{id}/stats/:
    get:
      operationId: user_stats_retrieve
      description: "Retrieve a user with some extra stats"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSerializerWithStats"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
  /api/user/password-reset/:
    post:
      operationId: user_password_reset_create
      description: |-
        Send an email to the user containing a url with a PasswordResetToken
        to send a patch request to with the new password
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Email has been sent to user@example.com"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
  /api/user/password-reset/{id}/{token}/:
    patch:
      operationId: user_password_reset_partial_update
      description: |-
        Validate the PasswordResetToken and set the new password
        provided by the user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: path
          name: token
          schema:
            type: string
          required: true
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Password reset successfully"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
          description: ""
  /api/user/skill/:
    post:
      operationId: user_skill_create
      description: "Create a skill for a user"
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Skill"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Skill"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Skill"
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skill"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
          description: ""
  /api/user/skill/{id}/:
    delete:
      operationId: user_skill_destroy
      description: "Delete a users skill"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - user
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
  /api/project/:
    get:
      operationId: project_list
      tags:
        - project
      description: "Return all projects where collaborator count is less than the maximum_collaborators"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
          description: ""
    post:
      operationId: project_create
      tags:
        - project
      description: "Create a new project with the following information: name, description, maximum_collaborators, collaborators (user id's)"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedProject"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedProject"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedProject"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
  /api/project/{id}/:
    get:
      operationId: project_retrieve
      description: "Retrieve a project by its id"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - project
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
    put:
      operationId: project_update
      description: "Update a project with the provided values"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedProject"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedProject"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedProject"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
    patch:
      operationId: project_partial_update
      description: "Update a project with the provided values"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedProject"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedProject"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedProject"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
    delete:
      operationId: project_destroy
      description: "Delete a project with the provided id"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - project
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
  /api/project/application/:
    get:
      operationId: project_application_list
      description: "List applications created by the authorized user or that are for a project he owns"
      tags:
        - project
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApplicationGet"
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
    post:
      operationId: project_application_create
      description: "Create an application to contribute to a project"
      tags:
        - project
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Application"
              properties:
                status:
                  readOnly: true
          application/x-www-form-urlencoded:
            schema:
              allOf:
                - $ref: "#/components/schemas/Application"
              properties:
                status:
                  readOnly: true
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/Application"
              properties:
                status:
                  readOnly: true
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationGet"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
  /api/project/application/{id}/:
    get:
      operationId: project_application_retrieve
      description: |-
        Retrieve an application by its id that is made by the authenticated user 
        or that is for a project that he owns
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - project
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationGet"
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
    patch:
      operationId: project_application_partial_update
      description: |-
        Update application status with the provided id. Only the owner of the
        project that it's meant for can update the application status
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  default: "denied"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                status:
                  type: string
                  default: "denied"
          multipart/form-data:
            schema:
              type: object
              properties:
                status:
                  type: string
                  default: "denied"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApplicationGet"
                properties:
                  status:
                    type: string
                    default: "denied"
          description: ""
        "400":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
    delete:
      operationId: project_application_destroy
      description: |-
        Delete application with the provided id. Only the one who created the 
        application or the owner of the project that it's meant for can delete 
        the application
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - project
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
          description: ""
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    default: "Not found."
          description: ""
components:
  schemas:
    Application:
      type: object
      properties:
        id:
          type: integer
          default: 1
          readOnly: true
        status:
          $ref: "#/components/schemas/StatusEnum"
        project:
          type: integer
          default: 1
      required:
        - id
        - project
    ApplicationGet:
      type: object
      properties:
        id:
          type: integer
          default: 1
          readOnly: true
        status:
          $ref: "#/components/schemas/StatusEnum"
        project_id:
          type: integer
          default: 1
        project_name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        skills:
          type: array
          items:
            type: object
            properties:
              language:
                $ref: "#/components/schemas/LanguageEnum"
              level:
                $ref: "#/components/schemas/LevelEnum"
    LanguageEnum:
      enum:
        - C++
        - javascript
        - python
        - java
        - lua
        - rust
        - go
        - julia
      type: string
      description: |-
        * `C++` - Cpp
        * `javascript` - Javascript
        * `python` - Python
        * `java` - Java
        * `lua` - Lua
        * `rust` - Rust
        * `go` - Go
        * `julia` - Julia
    LevelEnum:
      enum:
        - beginner
        - experienced
        - expert
      type: string
      description: |-
        * `beginner` - Beginner
        * `experienced` - Experienced
        * `expert` - Expert
    PatchedProject:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        maximum_collaborators:
          type: integer
          default: 5
        completed:
          type: boolean
          default: false
        collaborators:
          type: array
          items:
            type: integer
            default: 1
    Project:
      type: object
      properties:
        id:
          type: integer
          default: 1
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        maximum_collaborators:
          type: integer
          default: 5
        completed:
          type: boolean
          default: false
        collaborators:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
        creator:
          type: string
      required:
        - id
        - name
    Skill:
      type: object
      properties:
        id:
          type: integer
          default: 1
          readOnly: true
        language:
          $ref: "#/components/schemas/LanguageEnum"
        level:
          $ref: "#/components/schemas/LevelEnum"
      required:
        - id
    StatusEnum:
      enum:
        - pending
        - accepted
        - declined
      type: string
      description: |-
        * `pending` - Pending
        * `accepted` - Accepted
        * `declined` - Declined
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
        - access
        - password
        - refresh
        - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
        - access
        - refresh
    UserSerializerWithStats:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          default: 1
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        age:
          type: integer
          nullable: true
        country:
          type: string
          nullable: true
          maxLength: 255
        residence:
          type: string
          nullable: true
          maxLength: 255
        projects_created:
          type: integer
          readOnly: true
        projects_contributed:
          type: integer
          readOnly: true
        skills:
          type: array
          items:
            type: object
            properties:
              language:
                $ref: "#/components/schemas/LanguageEnum"
              level:
                $ref: "#/components/schemas/LevelEnum"
      required:
        - email
        - id
        - projects_contributed
        - projects_created
        - skills
        - username
    UserSerializerWithToken:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          default: 1
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        age:
          type: integer
          nullable: true
        country:
          type: string
          nullable: true
          maxLength: 255
        residence:
          type: string
          nullable: true
          maxLength: 255
        token:
          $ref: "#/components/schemas/TokenObtainPair"
          readOnly: true
      required:
        - email
        - id
        - password
        - token
        - username
    UnauthorizedError:
      type: object
      properties:
        detail:
          type: string
          default: "Authentication credentials were not provided."
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
