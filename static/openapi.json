{
  "openapi": "3.0.3",
  "info": {
    "title": "Project Contributors",
    "version": "1.0.0"
  },
  "paths": {
    "/api/project/": {
      "get": {
        "operationId": "project_list",
        "tags": [
          "project"
        ],
        "description": "Return all projects where collaborator count is less than the maximum_collaborators",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "project_create",
        "tags": [
          "project"
        ],
        "description": "Create a new project with the following information: name, description, maximum_collaborators, collaborators (user id's)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/project/{id}/": {
      "get": {
        "operationId": "project_retrieve",
        "description": "Retrieve a project by its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string",
                      "default": "Not found."
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "project_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string",
                      "default": "Not found."
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "project_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProject"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProject"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProject"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "project_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/project/application/": {
      "get": {
        "operationId": "project_application_list",
        "tags": [
          "project"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "project_application_create",
        "tags": [
          "project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/project/application/{id}/": {
      "get": {
        "operationId": "project_application_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "project_application_update",
        "description": "Overwrite put method implementation of the generic APIView to not allow it,\nbecause we only want to modify the application's status and no other field.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "project_application_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedApplication"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedApplication"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedApplication"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "project_application_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/user/{id}/stats/": {
      "get": {
        "operationId": "user_stats_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSerializerWithStats"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/login/": {
      "post": {
        "operationId": "user_login_create",
        "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenObtainPair"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenObtainPair"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenObtainPair"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenObtainPair"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/password-reset/": {
      "post": {
        "operationId": "user_password_reset_create",
        "description": "Send an email to the user containing a url with a PasswordResetToken\nto send a patch request to with the new password",
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/user/password-reset/{id}/{token}/": {
      "patch": {
        "operationId": "user_password_reset_partial_update",
        "description": "Validate the PasswordResetToken and set the new password\nprovided by the user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/user/register/": {
      "post": {
        "operationId": "user_register_create",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSerializerWithToken"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserSerializerWithToken"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserSerializerWithToken"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSerializerWithToken"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/skill/": {
      "post": {
        "operationId": "user_skill_create",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Skill"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Skill"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Skill"
              }
            }
          }
        },
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Skill"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/user/skill/{id}/": {
      "delete": {
        "operationId": "user_skill_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "user"
        ],
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/user/token/refresh/": {
      "post": {
        "operationId": "user_token_refresh_create",
        "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRefresh"
                }
              }
            },
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "project": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "project"
        ]
      },
      "LanguageEnum": {
        "enum": [
          "C++",
          "javascript",
          "python",
          "java",
          "lua",
          "rust",
          "go",
          "julia"
        ],
        "type": "string",
        "description": "* `C++` - Cpp\n* `javascript` - Javascript\n* `python` - Python\n* `java` - Java\n* `lua` - Lua\n* `rust` - Rust\n* `go` - Go\n* `julia` - Julia"
      },
      "LevelEnum": {
        "enum": [
          "beginner",
          "experienced",
          "expert"
        ],
        "type": "string",
        "description": "* `beginner` - Beginner\n* `experienced` - Experienced\n* `expert` - Expert"
      },
      "PatchedApplication": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "project": {
            "type": "integer"
          }
        }
      },
      "PatchedProject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "maximum_collaborators": {
            "type": "integer"
          },
          "completed": {
            "type": "boolean"
          },
          "collaborators": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "default": 1,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "maximum_collaborators": {
            "type": "integer",
            "default": 5
          },
          "completed": {
            "type": "boolean",
            "default": false
          },
          "collaborators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          },
          "creator": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ProjectCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "default": 1,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "maximum_collaborators": {
            "type": "integer",
            "default": 5
          },
          "completed": {
            "type": "boolean",
            "default": false
          },
          "collaborators": {
            "type": "array",
            "items": {
              "type": "integer",
              "default": 1
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Skill": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "language": {
            "$ref": "#/components/schemas/LanguageEnum"
          },
          "level": {
            "$ref": "#/components/schemas/LevelEnum"
          }
        },
        "required": [
          "id"
        ]
      },
      "StatusEnum": {
        "enum": [
          "pending",
          "accepted",
          "declined"
        ],
        "type": "string",
        "description": "* `pending` - Pending\n* `accepted` - Accepted\n* `declined` - Declined"
      },
      "TokenObtainPair": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "writeOnly": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "access": {
            "type": "string",
            "readOnly": true
          },
          "refresh": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "access",
          "password",
          "refresh",
          "username"
        ]
      },
      "TokenRefresh": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "readOnly": true
          },
          "refresh": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "access",
          "refresh"
        ]
      },
      "UserSerializerWithStats": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 254
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "age": {
            "type": "integer",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "residence": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "projects_created": {
            "type": "integer",
            "readOnly": true
          },
          "projects_contributed": {
            "type": "integer",
            "readOnly": true
          },
          "skills": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "required": [
          "email",
          "id",
          "projects_contributed",
          "projects_created",
          "skills",
          "username"
        ]
      },
      "UserSerializerWithToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 128
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "age": {
            "type": "integer",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "residence": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "token": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "required": [
          "email",
          "id",
          "password",
          "token",
          "username"
        ]
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "default": "Authentication credentials were not provided."
          }
        }
      }
    },
    "securitySchemes": {
      "jwtAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}